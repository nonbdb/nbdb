/*
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.orientechnologies.orient.test.database.auto;

import com.orientechnologies.core.command.script.OCommandScript;
import com.orientechnologies.core.config.YTGlobalConfiguration;
import com.orientechnologies.core.db.YTDatabaseSessionInternal;
import org.testng.Assert;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;

@Test
public class ConcurrentCommandAndOpenTest extends DocumentDBBaseTest {

  protected static final int MAX_CONNS = 10;

  @Parameters(value = "remote")
  public ConcurrentCommandAndOpenTest(boolean remote) {
    super(remote);
  }

  @Test
  public void concurrentCommands() throws Exception {
    YTGlobalConfiguration.DB_POOL_MIN.setValue(1);
    YTGlobalConfiguration.DB_POOL_MAX.setValue(MAX_CONNS);

    final Thread thread =
        new Thread(
            new Runnable() {
              @Override
              public void run() {
                YTDatabaseSessionInternal db = acquireSession();
                try {
                  // System.out.println("Start sleeping...");
                  db.command(new OCommandScript("SQL", "sleep 5000")).execute(db);
                  // System.out.println("Sleeping done!");

                } finally {
                  db.close();
                }
              }
            },
            "Test long sleep");

    thread.start();

    Thread.sleep(1000);

    int commandExecuted = 0;
    int iterations = MAX_CONNS * 5;
    for (int i = 0; i < iterations; ++i) {
      try (var db = acquireSession()) {
        db.command("select from OUser").close();
        commandExecuted++;
      }
    }

    // System.out.println("Waiting for the sleeping thread...");
    thread.join();
    // System.out.println("Done!");

    Assert.assertEquals(commandExecuted, iterations);
  }
}
