/* Generated By:JJTree: Do not edit this line. OServerStatement.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.jetbrains.youtrack.db.internal.core.sql.parser;

import com.jetbrains.youtrack.db.internal.common.exception.YTException;
import com.jetbrains.youtrack.db.internal.common.listener.OProgressListener;
import com.jetbrains.youtrack.db.internal.core.command.ServerCommandContext;
import com.jetbrains.youtrack.db.internal.core.db.YTDatabaseSessionInternal;
import com.jetbrains.youtrack.db.internal.core.db.YouTrackDBInternal;
import com.jetbrains.youtrack.db.internal.core.exception.YTCommandExecutionException;
import com.jetbrains.youtrack.db.internal.core.record.impl.EntityImpl;
import com.jetbrains.youtrack.db.internal.core.sql.YTCommandSQLParsingException;
import com.jetbrains.youtrack.db.internal.core.sql.executor.OInternalExecutionPlan;
import com.jetbrains.youtrack.db.internal.core.sql.executor.YTResult;
import com.jetbrains.youtrack.db.internal.core.sql.executor.YTResultInternal;
import com.jetbrains.youtrack.db.internal.core.sql.executor.YTResultSet;
import com.jetbrains.youtrack.db.internal.core.sql.query.OSQLAsynchQuery;
import java.util.Map;

public class OServerStatement extends SimpleNode {

  public OServerStatement(int id) {
    super(id);
  }

  public OServerStatement(OrientSql p, int id) {
    super(p, id);
  }

  public void toString(Map<Object, Object> params, StringBuilder builder) {
    throw new UnsupportedOperationException(
        "missing implementation in " + getClass().getSimpleName());
  }

  @Override
  public void toGenericStatement(StringBuilder builder) {
    throw new UnsupportedOperationException();
  }

  public void validate() throws YTCommandSQLParsingException {
  }

  @Override
  public String toString(String prefix) {
    StringBuilder builder = new StringBuilder();
    toString(null, builder);
    return builder.toString();
  }

  public Object execute(
      OSQLAsynchQuery<EntityImpl> request,
      ServerCommandContext context,
      OProgressListener progressListener) {
    throw new UnsupportedOperationException("Unsupported command: " + getClass().getSimpleName());
  }

  public YTResultSet execute(YouTrackDBInternal db, Object[] args) {
    return execute(db, args, true);
  }

  public YTResultSet execute(
      YouTrackDBInternal db, Object[] args, ServerCommandContext parentContext) {
    return execute(db, args, parentContext, true);
  }

  public YTResultSet execute(YouTrackDBInternal db, Map args) {
    return execute(db, args, true);
  }

  public YTResultSet execute(YouTrackDBInternal db, Map args, ServerCommandContext parentContext) {
    return execute(db, args, parentContext, true);
  }

  public YTResultSet execute(YouTrackDBInternal db, Object[] args, boolean usePlanCache) {
    return execute(db, args, null, usePlanCache);
  }

  public YTResultSet execute(
      YouTrackDBInternal db,
      Object[] args,
      ServerCommandContext parentContext,
      boolean usePlanCache) {
    throw new UnsupportedOperationException();
  }

  public YTResultSet execute(YouTrackDBInternal db, Map args, boolean usePlanCache) {
    return execute(db, args, null, usePlanCache);
  }

  public YTResultSet execute(
      YouTrackDBInternal db, Map args, ServerCommandContext parentContext, boolean usePlanCache) {
    throw new UnsupportedOperationException();
  }

  /**
   * creates an execution plan for current statement, with profiling disabled
   *
   * @param ctx the context that will be used to execute the statement
   * @return an execution plan
   */
  public OInternalExecutionPlan createExecutionPlan(ServerCommandContext ctx) {
    return createExecutionPlan(ctx, false);
  }

  /**
   * creates an execution plan for current statement
   *
   * @param ctx     the context that will be used to execute the statement
   * @param profile true to enable profiling, false to disable it
   * @return an execution plan
   */
  public OInternalExecutionPlan createExecutionPlan(ServerCommandContext ctx, boolean profile) {
    throw new UnsupportedOperationException();
  }

  public OInternalExecutionPlan createExecutionPlanNoCache(
      ServerCommandContext ctx, boolean profile) {
    return createExecutionPlan(ctx, profile);
  }

  public OServerStatement copy() {
    throw new UnsupportedOperationException("IMPLEMENT copy() ON " + getClass().getSimpleName());
  }

  public boolean refersToParent() {
    throw new UnsupportedOperationException(
        "Implement " + getClass().getSimpleName() + ".refersToParent()");
  }

  public boolean isIdempotent() {
    return false;
  }

  public static OStatement deserializeFromOResult(YTResult doc) {
    try {
      OStatement result =
          (OStatement)
              Class.forName(doc.getProperty("__class"))
                  .getConstructor(Integer.class)
                  .newInstance(-1);
      result.deserialize(doc);
    } catch (Exception e) {
      throw YTException.wrapException(new YTCommandExecutionException(""), e);
    }
    return null;
  }

  public YTResult serialize(YTDatabaseSessionInternal db) {
    YTResultInternal result = new YTResultInternal(db);
    result.setProperty("__class", getClass().getName());
    return result;
  }

  public void deserialize(YTResult fromResult) {
    throw new UnsupportedOperationException();
  }

  public boolean executinPlanCanBeCached() {
    return false;
  }
}
/* JavaCC - OriginalChecksum=86cab5eeff02ee2a2f8c5e0c0a017e6b (do not edit this line) */
