/* Generated By:JJTree: Do not edit this line. OFetchPlanItem.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.jetbrains.youtrack.db.internal.core.sql.parser;

import com.jetbrains.youtrack.db.internal.core.db.YTDatabaseSessionInternal;
import com.jetbrains.youtrack.db.internal.core.sql.executor.YTResult;
import com.jetbrains.youtrack.db.internal.core.sql.executor.YTResultInternal;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Objects;

public class OFetchPlanItem extends SimpleNode {

  protected Boolean star;
  protected OInteger leftDepth;
  protected boolean leftStar = false;
  protected OInteger rightDepth;
  protected List<String> fieldChain = new ArrayList<String>();

  public OFetchPlanItem(int id) {
    super(id);
  }

  public OFetchPlanItem(OrientSql p, int id) {
    super(p, id);
  }

  public void addFieldToChain(String field) {
    this.fieldChain.add(field);
  }

  public void toString(Map<Object, Object> params, StringBuilder builder) {
    if (Boolean.TRUE.equals(star)) {
      builder.append("*");
    } else {
      if (leftDepth != null) {
        builder.append("[");
        leftDepth.toString(params, builder);
        builder.append("]");
      } else if (leftStar) {
        builder.append("[*]");
      }

      boolean first = true;
      for (String s : fieldChain) {
        if (!first) {
          builder.append(".");
        }
        builder.append(s);
        first = false;
      }
    }
    builder.append(":");
    rightDepth.toString(params, builder);
  }

  public void toGenericStatement(StringBuilder builder) {
    if (Boolean.TRUE.equals(star)) {
      builder.append("*");
    } else {
      if (leftDepth != null) {
        builder.append("[");
        leftDepth.toGenericStatement(builder);
        builder.append("]");
      } else if (leftStar) {
        builder.append("[*]");
      }

      boolean first = true;
      for (String s : fieldChain) {
        if (!first) {
          builder.append(".");
        }
        builder.append(s);
        first = false;
      }
    }
    builder.append(":");
    rightDepth.toGenericStatement(builder);
  }

  public OFetchPlanItem copy() {
    OFetchPlanItem result = new OFetchPlanItem(-1);
    result.star = star;
    result.leftDepth = leftDepth == null ? null : leftDepth.copy();
    result.leftStar = leftStar;
    result.rightDepth = rightDepth == null ? null : rightDepth.copy();
    result.fieldChain.addAll(fieldChain);
    return result;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }

    OFetchPlanItem that = (OFetchPlanItem) o;

    if (leftStar != that.leftStar) {
      return false;
    }
    if (!Objects.equals(star, that.star)) {
      return false;
    }
    if (!Objects.equals(leftDepth, that.leftDepth)) {
      return false;
    }
    if (!Objects.equals(rightDepth, that.rightDepth)) {
      return false;
    }
    return Objects.equals(fieldChain, that.fieldChain);
  }

  @Override
  public int hashCode() {
    int result = star != null ? star.hashCode() : 0;
    result = 31 * result + (leftDepth != null ? leftDepth.hashCode() : 0);
    result = 31 * result + (leftStar ? 1 : 0);
    result = 31 * result + (rightDepth != null ? rightDepth.hashCode() : 0);
    result = 31 * result + (fieldChain != null ? fieldChain.hashCode() : 0);
    return result;
  }

  public YTResult serialize(YTDatabaseSessionInternal db) {
    YTResultInternal result = new YTResultInternal(db);
    result.setProperty("star", star);
    if (leftDepth != null) {
      result.setProperty("leftDepth", leftDepth.serialize(db));
    }
    result.setProperty("leftStar", leftStar);
    if (rightDepth != null) {
      result.setProperty("rightDepth", rightDepth.serialize(db));
    }
    if (fieldChain != null) {
      result.setProperty("rightDepth", new ArrayList<>(fieldChain));
    }
    return result;
  }

  public void deserialize(YTResult fromResult) {
    star = fromResult.getProperty("star");
    if (fromResult.getProperty("leftDepth") != null) {
      leftDepth = new OInteger(-1);
      leftDepth.deserialize(fromResult.getProperty("leftDepth"));
    }
    leftStar = fromResult.getProperty("leftStar");
    if (fromResult.getProperty("rightDepth") != null) {
      rightDepth = new OInteger(-1);
      rightDepth.deserialize(fromResult.getProperty("rightDepth"));
    }
    if (fromResult.getProperty("fieldChain") != null) {
      List<String> ser = fromResult.getProperty("fieldChain");
      fieldChain = new ArrayList<>();
      fieldChain.addAll(ser);
    }
  }
}
/* JavaCC - OriginalChecksum=b7f4c9a97a8f2ca3d85020e054a9ad16 (do not edit this line) */
