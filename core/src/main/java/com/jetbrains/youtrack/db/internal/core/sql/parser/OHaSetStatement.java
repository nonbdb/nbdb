/* Generated By:JJTree: Do not edit this line. OHaSetStatement.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.jetbrains.youtrack.db.internal.core.sql.parser;

import com.jetbrains.youtrack.db.internal.core.command.OCommandContext;
import com.jetbrains.youtrack.db.internal.enterprise.OEnterpriseEndpoint;
import com.jetbrains.youtrack.db.internal.core.exception.YTCommandExecutionException;
import com.jetbrains.youtrack.db.internal.core.sql.executor.YTResult;
import com.jetbrains.youtrack.db.internal.core.sql.executor.YTResultInternal;
import com.jetbrains.youtrack.db.internal.core.sql.executor.resultset.OExecutionStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class OHaSetStatement extends OSimpleExecStatement {

  protected OIdentifier operation;
  protected OExpression key;
  protected OExpression value;

  public OHaSetStatement(int id) {
    super(id);
  }

  public OHaSetStatement(OrientSql p, int id) {
    super(p, id);
  }

  @Override
  public OExecutionStream executeSimple(OCommandContext ctx) {
    List<YTResult> result = new ArrayList<>();

    String operation = this.operation.getStringValue();
    var db = ctx.getDatabase();
    Object key = this.key.execute(new YTResultInternal(db), ctx);
    if (key == null) {
      key = this.key.getDefaultAlias();
    }

    Object value = this.value.execute(new YTResultInternal(db), ctx);
    if (value == null) {
      value = this.value.getDefaultAlias();
      if (value.equals("null")) {
        value = null;
      }
    }

    OEnterpriseEndpoint ee = db.getEnterpriseEndpoint();
    if (ee == null) {
      throw new YTCommandExecutionException(
          "HA SET statements are only supported in YouTrackDB Enterprise Edition");
    }
    if (operation.equalsIgnoreCase("status")) {
      String finalResult;
      try {
        ee.haSetDbStatus(db, String.valueOf(key), String.valueOf(value));
        finalResult = "OK";
      } catch (UnsupportedOperationException e) {
        finalResult = e.getMessage();
      }
      YTResultInternal item = new YTResultInternal(db);
      item.setProperty("operation", "ha set status");
      item.setProperty("result", finalResult);
      result.add(item);
    } else if (operation.equalsIgnoreCase("owner")) {
      String finalResult;
      try {
        ee.haSetOwner(db, String.valueOf(key), String.valueOf(value));
        finalResult = "OK";
      } catch (UnsupportedOperationException e) {
        finalResult = e.getMessage();
      }
      YTResultInternal item = new YTResultInternal(db);
      item.setProperty("operation", "ha set owner");
      item.setProperty("result", finalResult);
      result.add(item);
    } else if (operation.equalsIgnoreCase("role")) {
      String finalResult;
      try {
        ee.haSetRole(db, String.valueOf(key), String.valueOf(value));
        finalResult = "OK";
      } catch (UnsupportedOperationException e) {
        finalResult = e.getMessage();
      }
      YTResultInternal item = new YTResultInternal(db);
      item.setProperty("operation", "ha set role");
      item.setProperty("result", finalResult);
      result.add(item);
    }

    return OExecutionStream.resultIterator(result.iterator());
  }

  @Override
  public void toString(Map<Object, Object> params, StringBuilder builder) {
    builder.append("HA SET ");
    operation.toString(params, builder);
    builder.append(" ");
    key.toString(params, builder);
    builder.append(" = ");
    value.toString(params, builder);
  }

  @Override
  public void toGenericStatement(StringBuilder builder) {
    builder.append("HA SET ");
    operation.toGenericStatement(builder);
    builder.append(" ");
    key.toGenericStatement(builder);
    builder.append(" = ");
    value.toGenericStatement(builder);
  }
}
/* JavaCC - OriginalChecksum=21dffd729680550a5deb24492465084d (do not edit this line) */
