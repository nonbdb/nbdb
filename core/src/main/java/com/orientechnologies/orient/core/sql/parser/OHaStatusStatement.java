/* Generated By:JJTree: Do not edit this line. OHaStatusStatement.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.orientechnologies.orient.core.sql.parser;

import com.orientechnologies.common.exception.YTException;
import com.orientechnologies.common.log.OLogManager;
import com.orientechnologies.orient.core.command.OCommandContext;
import com.orientechnologies.orient.core.db.YTDatabaseSessionInternal;
import com.orientechnologies.orient.core.exception.YTCommandExecutionException;
import com.orientechnologies.orient.core.sql.executor.YTResultInternal;
import com.orientechnologies.orient.core.sql.executor.resultset.OExecutionStream;
import java.util.Map;

public class OHaStatusStatement extends OSimpleExecStatement {

  public boolean servers = false;
  public boolean db = false;
  public boolean latency = false;
  public boolean messages = false;
  public boolean outputText = false;
  public boolean locks = false;

  public OHaStatusStatement(int id) {
    super(id);
  }

  public OHaStatusStatement(OrientSql p, int id) {
    super(p, id);
  }

  @Override
  public boolean isIdempotent() {
    return true;
  }

  @Override
  public void toString(Map<Object, Object> params, StringBuilder builder) {
    builder.append("HA STATUS");
    if (servers) {
      builder.append(" -servers");
    }
    if (db) {
      builder.append(" -db");
    }
    if (latency) {
      builder.append(" -latency");
    }
    if (messages) {
      builder.append(" -messages");
    }
    if (locks) {
      builder.append(" -locks");
    }
    if (outputText) {
      builder.append(" -output=text");
    }
    if (servers) {
      builder.append(" -servers");
    }
  }

  @Override
  public void toGenericStatement(StringBuilder builder) {
    builder.append("HA STATUS");
    if (servers) {
      builder.append(" -servers");
    }
    if (db) {
      builder.append(" -db");
    }
    if (latency) {
      builder.append(" -latency");
    }
    if (messages) {
      builder.append(" -messages");
    }
    if (locks) {
      builder.append(" -locks");
    }
    if (outputText) {
      builder.append(" -output=text");
    }
    if (servers) {
      builder.append(" -servers");
    }
  }

  @Override
  public OExecutionStream executeSimple(OCommandContext ctx) {
    if (outputText) {
      OLogManager.instance().info(this, "HA STATUS with text output is deprecated");
    }
    final YTDatabaseSessionInternal database = ctx.getDatabase();

    try {
      Map<String, Object> res = database.getHaStatus(servers, this.db, latency, messages);
      if (res != null) {
        YTResultInternal row = new YTResultInternal(database);
        res.entrySet().forEach(x -> row.setProperty(x.getKey(), x.getValue()));
        return OExecutionStream.singleton(row);
      } else {
        return OExecutionStream.empty();
      }
    } catch (Exception x) {
      throw YTException.wrapException(new YTCommandExecutionException("Cannot execute HA STATUS"),
          x);
    }
  }
}
/* JavaCC - OriginalChecksum=c8ab1b0172e8cdbea2078efe2c629e6a (do not edit this line) */
