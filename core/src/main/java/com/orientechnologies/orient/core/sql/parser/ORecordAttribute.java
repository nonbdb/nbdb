/* Generated By:JJTree: Do not edit this line. ORecordAttribute.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.orientechnologies.orient.core.sql.parser;

import com.orientechnologies.orient.core.command.OCommandContext;
import com.orientechnologies.orient.core.exception.ORecordNotFoundException;
import com.orientechnologies.orient.core.id.ORID;
import com.orientechnologies.orient.core.metadata.schema.OClass;
import com.orientechnologies.orient.core.record.OElement;
import com.orientechnologies.orient.core.record.ORecord;
import com.orientechnologies.orient.core.record.ORecordInternal;
import com.orientechnologies.orient.core.record.impl.ODocument;
import com.orientechnologies.orient.core.record.impl.ORecordBytes;
import com.orientechnologies.orient.core.sql.executor.OResult;
import com.orientechnologies.orient.core.sql.executor.OResultInternal;
import java.util.Map;

public class ORecordAttribute extends SimpleNode {

  protected String name;

  public ORecordAttribute(int id) {
    super(id);
  }

  public ORecordAttribute(OrientSql p, int id) {
    super(p, id);
  }

  public void toString(Map<Object, Object> params, StringBuilder builder) {
    builder.append(name);
  }

  @Override
  public void toGenericStatement(StringBuilder builder) {
    builder.append(name);
  }

  public ORecordAttribute copy() {
    ORecordAttribute result = new ORecordAttribute(-1);
    result.name = name;
    return result;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }

    ORecordAttribute that = (ORecordAttribute) o;

    if (name != null ? !name.equals(that.name) : that.name != null) {
      return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return name != null ? name.hashCode() : 0;
  }

  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public OResult serialize() {
    OResultInternal result = new OResultInternal();
    result.setProperty("name", name);
    return result;
  }

  public void deserialize(OResult fromResult) {
    name = fromResult.getProperty("name");
  }

  public Object evaluate(OResult iCurrentRecord, OCommandContext ctx) {
    if (name.equalsIgnoreCase("@rid")) {
      ORID identity = iCurrentRecord.getIdentity().orElse(null);
      if (identity == null) {
        identity = iCurrentRecord.getProperty(name);
      }
      return identity;
    } else if (name.equalsIgnoreCase("@class")) {
      var element = iCurrentRecord.toElement();
      if (element != null) {
        return element.getSchemaType().map(OClass::getName).orElse(null);
      }
      return null;
    } else if (name.equalsIgnoreCase("@version")) {
      return iCurrentRecord.getRecord().map(ORecord::getVersion).orElse(null);
    } else if (name.equals("@type")) {
      return iCurrentRecord
          .getRecord()
          .map(
              r -> {
                var recordType = ORecordInternal.getRecordType(r);
                if (recordType == ODocument.RECORD_TYPE) {
                  return "document";
                } else if (recordType == ORecordBytes.RECORD_TYPE) {
                  return "bytes";
                } else {
                  return "unknown";
                }
              })
          .orElse(null);
    } else if (name.equals("@size")) {
      return iCurrentRecord.getRecord().map(r -> r.toStream().length).orElse(null);
    } else if (name.equals("@raw")) {
      return iCurrentRecord.getRecord().map(r -> r.toStream()).orElse(null);
    } else if (name.equals("@rid")) {
      return iCurrentRecord.getIdentity().orElse(null);
    }

    return null;
  }

  public Object evaluate(OElement iCurrentRecord, OCommandContext ctx) {
    if (iCurrentRecord == null) {
      return null;
    }
    if (name.equalsIgnoreCase("@rid")) {
      return iCurrentRecord.getIdentity();
    } else if (name.equalsIgnoreCase("@class")) {
      return iCurrentRecord.getSchemaType().map(OClass::getName).orElse(null);
    } else if (name.equalsIgnoreCase("@version")) {
      try {
        ORecord record = iCurrentRecord.getRecord();
        return record.getVersion();
      } catch (ORecordNotFoundException e) {
        return null;
      }
    }
    return null;
  }
}
/* JavaCC - OriginalChecksum=45ce3cd16399dec7d7ef89f8920d02ae (do not edit this line) */
