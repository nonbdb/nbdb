package com.jetbrains.youtrack.db.internal.core;

import com.jetbrains.youtrack.db.internal.core.db.ODatabaseRecordThreadLocal;
import com.jetbrains.youtrack.db.internal.core.db.YTDatabaseSessionInternal;
import com.jetbrains.youtrack.db.internal.core.db.document.YTDatabaseDocumentTx;
import com.jetbrains.youtrack.db.internal.core.exception.YTDatabaseException;
import com.jetbrains.youtrack.db.internal.core.record.impl.EntityImpl;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;

public class ExceptionNotOpenTest {

  @Test
  public void testExceptionNotOpenMemory() {

    YTDatabaseSessionInternal db = new YTDatabaseDocumentTx("memory:testExceptionNotOpenMemory");
    try {
      db.save(new EntityImpl());
      Assert.fail();
    } catch (YTDatabaseException ex) {
    }
    try {
      db.delete(new EntityImpl());
      Assert.fail();
    } catch (YTDatabaseException ex) {
    }
    try {
      db.begin();
      Assert.fail();
    } catch (YTDatabaseException ex) {
    }
    try {
      db.rollback();
      Assert.fail();
    } catch (YTDatabaseException ex) {
    }
    try {
      db.commit();
      Assert.fail();
    } catch (YTDatabaseException ex) {
    }
    try {
      db.getMetadata();
      Assert.fail();
    } catch (YTDatabaseException ex) {
    }
  }

  @Test
  @Ignore
  public void testExceptionNotOpenRemote() {
    try {
      var db = new YTDatabaseDocumentTx("remote:127.0.0.1:00");
      Assert.fail();
    } catch (YTDatabaseException e) {
      Assert.assertNull(ODatabaseRecordThreadLocal.instance().getIfDefined());
    }
  }

  @Test
  public void testExceptionNotOpenPlocal() {

    YTDatabaseSessionInternal db = new YTDatabaseDocumentTx("plocal:./target/databaseCheck");
    try {
      db.save(new EntityImpl());
      Assert.fail();
    } catch (YTDatabaseException ex) {
    }
    try {
      db.delete(new EntityImpl());
      Assert.fail();
    } catch (YTDatabaseException ex) {
    }
    try {
      db.begin();
      Assert.fail();
    } catch (YTDatabaseException ex) {
    }
    try {
      db.rollback();
      Assert.fail();
    } catch (YTDatabaseException ex) {
    }
    try {
      db.commit();
      Assert.fail();
    } catch (YTDatabaseException ex) {
    }
    try {
      db.getMetadata();
      Assert.fail();
    } catch (YTDatabaseException ex) {
    }
  }
}
